package 개념정리.인프런.그래프;

public class 그래프의표현 {
    /*
    그래프 구현 방법
    1. 엣지 리스트
    1) 가중치가 없는 그래프
    배열에 출발 노드, 도착 노드를 저장하여 엣지를 표현
    [1,2]: 1에서 2로 뻗어나가는 엣지

    * 방향이 없는 그래프라면 [1,2] 와 [2,1] 은 같은 표현

    2) 가중치 있는 그래프
    배열에 출발 노드, 도착 노드, 가중치를 저장하여 엣지를 표현
    [1,2,8]: 가중치 8
    특정 노드와 관련되어 있는 엣지를 탐색하기는 쉽지 않음

    => 벨만포드, 크루스칼 알고리즘에 사용

    2. 인접행렬
    - 2차원 배열을 자료구조로 이용하여 그래프 표현
       A[N][N]
    - 노드와 관련되어있는 엣지를 탐색하려면 N번 접근해야 하므로 노드 개수에 비해 엣지가 적을 때는 공간효율성이 떨어짐
    - 노드개수가 많은 경우 아예 2차원 배열 선언 자체를 할 수 없는 경우도 있음
    - 노드가 3만 개가 넘으면 자바 힙 스페이스에러가 발생

    3. 인접리스트
    - 노드 개수만큼 ArrayList를 선언
    * ArrayList: 가변적

    1) 가중치 없을 때
    ArrayList<Integer>[N]
    A[3].add(4)

    2) 가중치 있을 때
     ArrayList<Node>[N]
     자료형을 클래스로 사용
     Node 클래스 -> 도착노드, 가중치를 가짐
     A[3].add(new Node(4,13))

     - 그래프구현은 복잡
     - 노드와 연결되어 있는 엣지를 탐색하는 시간이 매우 빠름
     - 공간효율이 좋음, 메모리 초과 에러도 발생하지 않음
     => 인접리스트를 이용한 그래프 구현이 코딩테스트에서 많이 나옴


     */
}
